/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoundsIndexImport } from './routes/rounds/index'
import { Route as ScreeningsSignupImport } from './routes/screenings/signup'
import { Route as ScreeningsIdIndexImport } from './routes/screenings/$id/index'
import { Route as PitchesIdIndexImport } from './routes/pitches/$id/index'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RoundsIndexRoute = RoundsIndexImport.update({
  id: '/rounds/',
  path: '/rounds/',
  getParentRoute: () => rootRoute,
} as any)

const ScreeningsSignupRoute = ScreeningsSignupImport.update({
  id: '/screenings/signup',
  path: '/screenings/signup',
  getParentRoute: () => rootRoute,
} as any)

const ScreeningsIdIndexRoute = ScreeningsIdIndexImport.update({
  id: '/screenings/$id/',
  path: '/screenings/$id/',
  getParentRoute: () => rootRoute,
} as any)

const PitchesIdIndexRoute = PitchesIdIndexImport.update({
  id: '/pitches/$id/',
  path: '/pitches/$id/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/screenings/signup': {
      id: '/screenings/signup'
      path: '/screenings/signup'
      fullPath: '/screenings/signup'
      preLoaderRoute: typeof ScreeningsSignupImport
      parentRoute: typeof rootRoute
    }
    '/rounds/': {
      id: '/rounds/'
      path: '/rounds'
      fullPath: '/rounds'
      preLoaderRoute: typeof RoundsIndexImport
      parentRoute: typeof rootRoute
    }
    '/pitches/$id/': {
      id: '/pitches/$id/'
      path: '/pitches/$id'
      fullPath: '/pitches/$id'
      preLoaderRoute: typeof PitchesIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/screenings/$id/': {
      id: '/screenings/$id/'
      path: '/screenings/$id'
      fullPath: '/screenings/$id'
      preLoaderRoute: typeof ScreeningsIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/screenings/signup': typeof ScreeningsSignupRoute
  '/rounds': typeof RoundsIndexRoute
  '/pitches/$id': typeof PitchesIdIndexRoute
  '/screenings/$id': typeof ScreeningsIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/screenings/signup': typeof ScreeningsSignupRoute
  '/rounds': typeof RoundsIndexRoute
  '/pitches/$id': typeof PitchesIdIndexRoute
  '/screenings/$id': typeof ScreeningsIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/screenings/signup': typeof ScreeningsSignupRoute
  '/rounds/': typeof RoundsIndexRoute
  '/pitches/$id/': typeof PitchesIdIndexRoute
  '/screenings/$id/': typeof ScreeningsIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/screenings/signup'
    | '/rounds'
    | '/pitches/$id'
    | '/screenings/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/screenings/signup'
    | '/rounds'
    | '/pitches/$id'
    | '/screenings/$id'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/screenings/signup'
    | '/rounds/'
    | '/pitches/$id/'
    | '/screenings/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ScreeningsSignupRoute: typeof ScreeningsSignupRoute
  RoundsIndexRoute: typeof RoundsIndexRoute
  PitchesIdIndexRoute: typeof PitchesIdIndexRoute
  ScreeningsIdIndexRoute: typeof ScreeningsIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ScreeningsSignupRoute: ScreeningsSignupRoute,
  RoundsIndexRoute: RoundsIndexRoute,
  PitchesIdIndexRoute: PitchesIdIndexRoute,
  ScreeningsIdIndexRoute: ScreeningsIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/screenings/signup",
        "/rounds/",
        "/pitches/$id/",
        "/screenings/$id/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/screenings/signup": {
      "filePath": "screenings/signup.tsx"
    },
    "/rounds/": {
      "filePath": "rounds/index.tsx"
    },
    "/pitches/$id/": {
      "filePath": "pitches/$id/index.tsx"
    },
    "/screenings/$id/": {
      "filePath": "screenings/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
