# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sebumarket
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: sebu
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-endpoint

plugins:
  - serverless-domain-manager

build:
  esbuild:
    bundle: true
    target: node20
    configFile: './sls/esbuild.config.js'

provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  environment:
    # DB_SSL_MODE: 
    AUTH_COOKIE_PASSWORD: ${env:AUTH_COOKIE_PASSWORD}
    AI_API_KEY: ${env:AI_API_KEY}
    AIME_ASSISTANT_PROMPT_KEY: ${env:AIME_ASSISTANT_PROMPT_KEY}
    AIME_SCREENING_PROMPT_KEY: ${env:AIME_SCREENING_PROMPT_KEY}
    CGECKO_CHAIN_ID: ${env:CGECKO_CHAIN_ID}
    CHAIN_ID: ${env:CHAIN_ID}
    COINGECKO_API_KEY: ${env:COINGECKO_API_KEY}
    DB_DATABASE: ${self:custom.secrets.db.database, null}
    DB_HOST: ${self:custom.secrets.db.host, null}
    DB_PASSWORD: ${self:custom.secrets.db.password, null}
    DB_PORT: ${self:custom.secrets.db.port, null}
    DB_SSL_REQUIRED: ${self:custom.secrets.db.ssl_required, null}
    DB_USERNAME: ${self:custom.secrets.db.username, null}
    EMBEDDING_API_KEY: ${env:EMBEDDING_API_KEY}
    SQS_AGENT_MESSAGE_QUEUE: agent-message
    IS_LOCAL: false
    LLM_PROVIDER: openai
    NODE_EXTRA_CA_CERTS: /var/runtime/ca-cert.pem
    RPC_URL: ${env:RPC_URL}
    SEBU_INVESTOR_PROMPT_KEY: ${env:SEBU_INVESTOR_PROMPT_KEY}
    SEBU_MASTER_ADDRESS: ${env:SEBU_MASTER_ADDRESS}
    SEBU_PORTFOLIO_ADDRESS: ${env:SEBU_PORTFOLIO_ADDRESS}
    UNIV3_FACTORY_ADDRESS: ${env:UNIV3_FACTORY_ADDRESS}
    USDC_ADDRESS: ${env:USDC_ADDRESS}
    USDC_WETH_POOL: ${env:USDC_WETH_POOL}
    WETH_ADDRESS: ${env:WETH_ADDRESS}
    SEPOLIA_RPC_URL: ${env:SEPOLIA_RPC_URL}
    SITE_GUARDIANS: ${env:SITE_GUARDIANS}
    GUARDIAN_WALLET_ADDRESS: ${env:GUARDIAN_WALLET_ADDRESS}
    GUARDIAN_WALLET_PRIVATE_KEY: ${env:GUARDIAN_WALLET_PRIVATE_KEY}
  # websocketsApiName: sebu-ws-api
  # websocketsApiRouteSelectionExpression: $request.body.event
  # websocketsDescription: Custom Serverless Websockets
  # httpApi:
    # cors: true
  # logs:
  #   httpApi:
  #     level: INFO
    # websocket:
    #   level: INFO
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:GetParametersByPath
          Resource:
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter${env:AIME_ASSISTANT_PROMPT_KEY}
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter${env:AIME_SCREENING_PROMPT_KEY}
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter${env:SEBU_INVESTOR_PROMPT_KEY}
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:db-credentials-*
        - Effect: Allow
          Action:
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:ChangeMessageVisibility
            - sqs:ListQueues
            - sqs:ListQueueTags
          Resource:
            - arn:aws:sqs:${self:provider.region}:${aws:accountId}:*
  vpc:
    securityGroupIds:
      - ${env:AWS_SECURITY_GROUP_ID}
    subnetIds:
      - ${env:AWS_SUBNET_ID}

custom:
  secrets: ${file(./sls/resolve-secrets.js)}

  # used custom domain plugin
  customDomain:
    http:
      domainName: ${env:AWS_API_HTTP_FQDN}
      # stage: dev
      basePath: v1
      createRoute53Record: true
      createRoute53IPv6Record: true
      endpointType: REGIONAL
      securityPolicy: tls_1_2
      apiType: http
    # websocket:
    #   domainName: ${env:AWS_API_WS_FQDN}
    #   # stage: dev
    #   basePath: v1
    #   createRoute53Record: true
    #   createRoute53IPv6Record: true
    #   endpointType: REGIONAL
    #   securityPolicy: tls_1_2

functions:
  agentCallHandler:
    handler: src/handler.agentCallHandler
    timeout: 60
    events:
      - sqs: 
          arn: arn:aws:sqs:us-east-1:746669197208:agent-message
          batchSize: 1
          maximumBatchingWindow: 2

  httpRouter:
    handler: src/expressHandler.handler
    timeout: 29
    events:
      - httpApi: '*'
    provisionedConcurrency: 5


  watchdogHandler:
    handler: src/handler.watchdogHandler
    events:
      - schedule: rate(1 minute)
        # rate: rate(1 minute)

  migrations:
    timeout: 600
    handler: src/migrations.handler